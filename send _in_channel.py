import os
import asyncio
import json
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.errors import rpcerrorlist

load_dotenv()

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏ Telegram ---
MAX_CAPTION_LENGTH = 1024

# --- 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
api_id = os.getenv('API_ID')
api_hash = os.getenv('API_HASH')
session_name = os.getenv('SESSION_NAME')
raw_channel_id = os.getenv('CHANNEL_ID')

if not all([api_id, api_hash, session_name, raw_channel_id]):
    raise ValueError(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –∑–∞–¥–∞–Ω—ã API_ID, API_HASH, SESSION_NAME –∏ CHANNEL_ID"
    )

# --- 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ —á–∏—Å–ª–æ ---
try:
    CHANNEL_ID = int(raw_channel_id)
    print(f'–ò—Å–ø–æ–ª—å–∑—É–µ–º CHANNEL_ID: {CHANNEL_ID}')
except (ValueError, TypeError):
    raise TypeError("CHANNEL_ID –≤ .env —Ñ–∞–π–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, -100123456789)")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
client = TelegramClient(session_name, int(api_id), api_hash)

def format_message_from_json(info_data):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö JSON."""
    message_parts = []

    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ (—Ä—É—Å—Å–∫–æ–µ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ)
    if info_data.get('title_ru'):
        message_parts.append(f"üé¨ {info_data['title_ru']}")
    if info_data.get('original_title'):
        message_parts.append(f"¬©Ô∏è {info_data['original_title']}")

    # –ñ–∞–Ω—Ä
    if info_data.get('genre'):
        message_parts.append(f"üé≠ –ñ–∞–Ω—Ä: {info_data['genre'].capitalize()}")

    # –ì–æ–¥
    if info_data.get('year'):
        message_parts.append(f"üóì –ì–æ–¥: {info_data['year']}")

    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if info_data.get('duration'):
        message_parts.append(f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info_data['duration']}")

    # –°—Ç—Ä–∞–Ω–∞
    if info_data.get('country'):
        message_parts.append(f"üåç –°—Ç—Ä–∞–Ω–∞: {info_data['country']}")

    # –†–µ–∂–∏—Å—Å–µ—Ä
    if info_data.get('director'):
        message_parts.append(f"üé• –†–µ–∂–∏—Å—Å–µ—Ä: {info_data['director']}")

    # –ê–∫—Ç–µ—Ä—ã
    if info_data.get('actors'):
        message_parts.append(f"ü§° –ê–∫—Ç–µ—Ä—ã: {info_data['actors']}")

    # –†–µ–π—Ç–∏–Ω–≥ Kinopoisk
    if info_data.get('kinopoisk'):
        message_parts.append(f"‚≠ê –ö–∏–Ω–æ–ø–æ–∏—Å–∫: {info_data['kinopoisk']}")

    # –ú–∏—Ä–æ–≤–∞—è –ø—Ä–µ–º—å–µ—Ä–∞
    if info_data.get('world_premiere'):
        message_parts.append(f"üåê –ü—Ä–µ–º—å–µ—Ä–∞ –≤ –º–∏—Ä–µ: {info_data['world_premiere']}")

    # –°–ª–æ–≥–∞–Ω
    if info_data.get('slogan'):
        message_parts.append(f"üó£Ô∏è –°–ª–æ–≥–∞–Ω: {info_data['slogan']}")

    # –û–ø–∏—Å–∞–Ω–∏–µ (–¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    description = info_data.get('description')
    if description:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–µ—Ä–µ–¥ –æ–ø–∏—Å–∞–Ω–∏–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
        if message_parts:
            message_parts.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞

        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —á—Ç–æ–±—ã —É–ª–æ–∂–∏—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç Telegram
        # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
        current_length_of_parts = sum(len(p) for p in message_parts) + len(message_parts) # + len(message_parts) –∑–∞ —Å—á–µ—Ç '\n'

        remaining_length = MAX_CAPTION_LENGTH - current_length_of_parts - len("üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n") - len("...")

        if remaining_length > 0:
            if len(description) > remaining_length:
                description_trimmed = description[:remaining_length].rsplit(' ', 1)[0] + "..." # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Å–ª–æ–≤—É
                message_parts.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description_trimmed}")
                print("–í–Ω–∏–º–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ Telegram.")
            else:
                message_parts.append(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}")
        else:
            print("–í–Ω–∏–º–∞–Ω–∏–µ: –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è —É–∂–µ –∑–∞–Ω–∏–º–∞—é—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞.")


    return "\n".join([part for part in message_parts if part.strip()]) # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

async def main(film_path=r'downloads\10-lyudi-v-chernom-2-2002'):
    try:
        # --- –ü–æ–ª—É—á–∞–µ–º "—Å—É—â–Ω–æ—Å—Ç—å" (entity) –¥–ª—è –∫–∞–Ω–∞–ª–∞ ---
        print(f"\n–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–Ω–∞–ª–∞ ID: {CHANNEL_ID}...")
        channel_entity = await client.get_entity(CHANNEL_ID)
        print("–°—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞!")

        # --- –ß–∏—Ç–∞–µ–º info.json ---
        info_json_path = os.path.join(film_path, 'info.json')
        if not os.path.exists(info_json_path):
            print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª info.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {info_json_path}")
            return

        with open(info_json_path, 'r', encoding='utf-8') as f:
            film_info = json.load(f)

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        formatted_message = format_message_from_json(film_info)
        if not formatted_message:
            print("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ info.json.")
            return

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –≤ –∫–∞–Ω–∞–ª ---
        print("\n–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –≤ –∫–∞–Ω–∞–ª...")

        image_path = os.path.join(film_path, 'poster.jpg')

        if not os.path.exists(image_path):
            print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {image_path}")
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.")
            return

        channel_post = await client.send_message(
            entity=channel_entity,
            message=formatted_message,
            file=image_path
        )
        print(f"–ü–æ—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª. ID —Å–æ–æ–±—â–µ–Ω–∏—è: {channel_post.id}")

    except rpcerrorlist.PeerIdInvalidError:
        print(f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞ ({CHANNEL_ID}), –ª–∏–±–æ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.")
    except ValueError as e:
        print(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–∞—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID. {e}")
    except FileNotFoundError as e:
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å. {e}")
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ info.json: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç. {e}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

# --- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è if __name__ == '__main__': ---
if __name__ == '__main__':
    try:
        with client:
            client.loop.run_until_complete(main())
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

    print("\n–†–∞–±–æ—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")